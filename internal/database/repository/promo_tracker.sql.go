// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: promo_tracker.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTrackedPromo = `-- name: CreateTrackedPromo :one
INSERT INTO "promo_tracker" (hashed_string, expired_at, created_at, claimed, user_name, voucher) 
VALUES($1, $2, now(), false, $3, $4)
RETURNING id, hashed_string, expired_at, created_at, claimed, user_name, updated_at, voucher, claimed_at, is_processed, sent_to_tm, process_note, user_id
`

type CreateTrackedPromoParams struct {
	HashedString string
	ExpiredAt    pgtype.Timestamptz
	UserName     string
	Voucher      pgtype.Text
}

func (q *Queries) CreateTrackedPromo(ctx context.Context, arg CreateTrackedPromoParams) (PromoTracker, error) {
	row := q.db.QueryRow(ctx, createTrackedPromo,
		arg.HashedString,
		arg.ExpiredAt,
		arg.UserName,
		arg.Voucher,
	)
	var i PromoTracker
	err := row.Scan(
		&i.ID,
		&i.HashedString,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.Claimed,
		&i.UserName,
		&i.UpdatedAt,
		&i.Voucher,
		&i.ClaimedAt,
		&i.IsProcessed,
		&i.SentToTm,
		&i.ProcessNote,
		&i.UserID,
	)
	return i, err
}

const getAllTrackedPromos = `-- name: GetAllTrackedPromos :many
SELECT id, hashed_string, expired_at, created_at, claimed, user_name, updated_at, voucher, claimed_at, is_processed, sent_to_tm, process_note, user_id FROM "promo_tracker"
ORDER BY id DESC
`

func (q *Queries) GetAllTrackedPromos(ctx context.Context) ([]PromoTracker, error) {
	rows, err := q.db.Query(ctx, getAllTrackedPromos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PromoTracker
	for rows.Next() {
		var i PromoTracker
		if err := rows.Scan(
			&i.ID,
			&i.HashedString,
			&i.ExpiredAt,
			&i.CreatedAt,
			&i.Claimed,
			&i.UserName,
			&i.UpdatedAt,
			&i.Voucher,
			&i.ClaimedAt,
			&i.IsProcessed,
			&i.SentToTm,
			&i.ProcessNote,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneTrackedPromo = `-- name: GetOneTrackedPromo :one
SELECT id, hashed_string, expired_at, created_at, claimed, user_name, updated_at, voucher, claimed_at, is_processed, sent_to_tm, process_note, user_id FROM "promo_tracker"
WHERE "hashed_string" = $1
`

func (q *Queries) GetOneTrackedPromo(ctx context.Context, hashedString string) (PromoTracker, error) {
	row := q.db.QueryRow(ctx, getOneTrackedPromo, hashedString)
	var i PromoTracker
	err := row.Scan(
		&i.ID,
		&i.HashedString,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.Claimed,
		&i.UserName,
		&i.UpdatedAt,
		&i.Voucher,
		&i.ClaimedAt,
		&i.IsProcessed,
		&i.SentToTm,
		&i.ProcessNote,
		&i.UserID,
	)
	return i, err
}

const updatePromoTrackerIsProcessed = `-- name: UpdatePromoTrackerIsProcessed :one
UPDATE "promo_tracker"
SET is_processed = $2
WHERE "hashed_string" = $1
RETURNING id, hashed_string, expired_at, created_at, claimed, user_name, updated_at, voucher, claimed_at, is_processed, sent_to_tm, process_note, user_id
`

type UpdatePromoTrackerIsProcessedParams struct {
	HashedString string
	IsProcessed  bool
}

func (q *Queries) UpdatePromoTrackerIsProcessed(ctx context.Context, arg UpdatePromoTrackerIsProcessedParams) (PromoTracker, error) {
	row := q.db.QueryRow(ctx, updatePromoTrackerIsProcessed, arg.HashedString, arg.IsProcessed)
	var i PromoTracker
	err := row.Scan(
		&i.ID,
		&i.HashedString,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.Claimed,
		&i.UserName,
		&i.UpdatedAt,
		&i.Voucher,
		&i.ClaimedAt,
		&i.IsProcessed,
		&i.SentToTm,
		&i.ProcessNote,
		&i.UserID,
	)
	return i, err
}

const updateTrackedPromo = `-- name: UpdateTrackedPromo :one
UPDATE "promo_tracker"
SET claimed = $2, claimed_at = now()
WHERE "hashed_string" = $1
RETURNING id, hashed_string, expired_at, created_at, claimed, user_name, updated_at, voucher, claimed_at, is_processed, sent_to_tm, process_note, user_id
`

type UpdateTrackedPromoParams struct {
	HashedString string
	Claimed      bool
}

func (q *Queries) UpdateTrackedPromo(ctx context.Context, arg UpdateTrackedPromoParams) (PromoTracker, error) {
	row := q.db.QueryRow(ctx, updateTrackedPromo, arg.HashedString, arg.Claimed)
	var i PromoTracker
	err := row.Scan(
		&i.ID,
		&i.HashedString,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.Claimed,
		&i.UserName,
		&i.UpdatedAt,
		&i.Voucher,
		&i.ClaimedAt,
		&i.IsProcessed,
		&i.SentToTm,
		&i.ProcessNote,
		&i.UserID,
	)
	return i, err
}
