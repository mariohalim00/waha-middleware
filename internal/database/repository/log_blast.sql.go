// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: log_blast.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLogBlast = `-- name: CreateLogBlast :one
INSERT INTO "log_blast" (workflow_start, blast_start, blast_end, actual_blast, success_blast, failed_blast, raw_blast, non_existent_number) 
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, workflow_start, blast_start, blast_end, actual_blast, success_blast, failed_blast, raw_blast, non_existent_number
`

type CreateLogBlastParams struct {
	WorkflowStart     pgtype.Timestamptz
	BlastStart        pgtype.Timestamptz
	BlastEnd          pgtype.Timestamptz
	ActualBlast       pgtype.Int4
	SuccessBlast      pgtype.Int4
	FailedBlast       pgtype.Int4
	RawBlast          pgtype.Int4
	NonExistentNumber pgtype.Int4
}

func (q *Queries) CreateLogBlast(ctx context.Context, arg CreateLogBlastParams) (LogBlast, error) {
	row := q.db.QueryRow(ctx, createLogBlast,
		arg.WorkflowStart,
		arg.BlastStart,
		arg.BlastEnd,
		arg.ActualBlast,
		arg.SuccessBlast,
		arg.FailedBlast,
		arg.RawBlast,
		arg.NonExistentNumber,
	)
	var i LogBlast
	err := row.Scan(
		&i.ID,
		&i.WorkflowStart,
		&i.BlastStart,
		&i.BlastEnd,
		&i.ActualBlast,
		&i.SuccessBlast,
		&i.FailedBlast,
		&i.RawBlast,
		&i.NonExistentNumber,
	)
	return i, err
}

const updateLogBlast = `-- name: UpdateLogBlast :one
UPDATE "log_blast"
SET workflow_start = $2, blast_start = $3, blast_end = $4,
    actual_blast = $5, success_blast = $6, failed_blast = $7, raw_blast = $8, non_existent_number = $9
WHERE id = $1
RETURNING id, workflow_start, blast_start, blast_end, actual_blast, success_blast, failed_blast, raw_blast, non_existent_number
`

type UpdateLogBlastParams struct {
	ID                pgtype.UUID
	WorkflowStart     pgtype.Timestamptz
	BlastStart        pgtype.Timestamptz
	BlastEnd          pgtype.Timestamptz
	ActualBlast       pgtype.Int4
	SuccessBlast      pgtype.Int4
	FailedBlast       pgtype.Int4
	RawBlast          pgtype.Int4
	NonExistentNumber pgtype.Int4
}

func (q *Queries) UpdateLogBlast(ctx context.Context, arg UpdateLogBlastParams) (LogBlast, error) {
	row := q.db.QueryRow(ctx, updateLogBlast,
		arg.ID,
		arg.WorkflowStart,
		arg.BlastStart,
		arg.BlastEnd,
		arg.ActualBlast,
		arg.SuccessBlast,
		arg.FailedBlast,
		arg.RawBlast,
		arg.NonExistentNumber,
	)
	var i LogBlast
	err := row.Scan(
		&i.ID,
		&i.WorkflowStart,
		&i.BlastStart,
		&i.BlastEnd,
		&i.ActualBlast,
		&i.SuccessBlast,
		&i.FailedBlast,
		&i.RawBlast,
		&i.NonExistentNumber,
	)
	return i, err
}
